#include "pch.h"
#include <iostream>
#include "CorePch.h"

#include <thread>	// 리눅스와 윈도우 환경 공용적 스레드 생성 (스레드 표준)
#include <atomic>	// atomic<자료형> ,   자료.fetch_add(값);
#include <mutex>	// Mutual Exclusive (상호 배타적)
/* 데드락 주의 // 스핀락 : 계속 대기 체크 // 컨텍스트 스위칭 */
#include <Windows.h> // Event 사용
#include <future>


//================================================================
//================================================================
//1. 인터넷 스크랩
template <typename T> constexpr auto type_name()
{
    std::string_view name, prefix, suffix;
#ifdef __clang__
    name = __PRETTY_FUNCTION__;
    prefix = "auto type_name() [T = ";
    suffix = "]";
#elif defined(__GNUC__)
    name = __PRETTY_FUNCTION__;
    prefix = "constexpr auto type_name() [with T = ";
    suffix = "]";
#endif
    name.remove_prefix(prefix.size());
    name.remove_suffix(suffix.size());
    return name;
}
#define get_type_name(T) type_name<T>()                    // type 값을 전달
#define get_type_category(V) type_name<decltype(V)>()      // value 값을 전달
//================================================================
//================================================================
// 2-1. 메크로 함수
#define P1(...)\
void __VA_ARGS__()\
{\
	cout << "메크로" <<endl;\
	return;\
}
class A
{
public:
	P1(q)
};
//================================================================
//================================================================
//2-2. 메크로 함수2
#define P2(a1, a2, ...) class a1\
{\
public:\
	void a2()\
	{\
		cout << "메크로" << __VA_ARGS__ << endl;\
		return;\
	}\
};
//================================================================
//================================================================
//3. 가변인자 템플릿
void subfoo1(int a, int b)
{
	cout << a << endl;
	cout << b << endl;
}

template<typename ... Types>
void foo1(Types ... args)
{
	subfoo1(args...);
    return;
}
//================================================================
//================================================================
//4. 가변인자 함수
void foo2(int count, ...)
{
	va_list va;
	va_start(va, count);
	for (int i = 0; i < count; i++)
	{
		cout << va_arg(va, int) << endl;
	}
	va_end(va);
	return;
}
//================================================================
//================================================================
//5. 
//================================================================
//================================================================
//6.  
//================================================================
//================================================================
//7.
//================================================================
//================================================================
//8.
//================================================================
//================================================================
//9.


//================================================================
//================================================================
//메인 함수
int main()
{
	
}
